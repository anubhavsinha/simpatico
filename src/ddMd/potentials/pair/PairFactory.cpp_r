/*
* Simpatico - Simulation Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2014, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <ddMd/potentials/pair/PairFactory.h>
#include <ddMd/simulation/Simulation.h>

// PairPotential interface and implementation classes
#include <ddMd/potentials/pair/PairPotential.h>
#include <ddMd/potentials/pair/PairPotentialImpl.h>

// Pair interaction classes
#include <inter/pair/LJPair.h>
#include <inter/pair/WcaPair.h>
#include <inter/pair/DpdPair.h>

namespace DdMd
{

   using namespace Inter;

   /**
   * Default constructor.
   */
   PairFactory::PairFactory(Simulation& simulation)
    : Factory<PairPotential>(),
      simulationPtr_(&simulation)
   {}

   /*
   * Return a pointer to a new PairPotential, if possible.
   */
   PairPotential* 
   PairFactory::factory(const std::string& name) const
   {
      PairPotential* ptr = 0;

      // Try subfactories first.
      ptr = trySubfactories(name);
      if (ptr) return ptr;

      if (name == "LJPair") {
         ptr = new PairPotentialImpl<LJPair>(*simulationPtr_);
      } else
      if (name == "WcaPair") {
         ptr = new PairPotentialImpl<WcaPair>(*simulationPtr_);
      } else
      if (name == "DpdPair") {
         ptr = new PairPotentialImpl<DpdPair>(*simulationPtr_);
      } 
      return ptr;
   }

}
