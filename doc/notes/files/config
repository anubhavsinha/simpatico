Configuration file structure (ascii):

   BOUNDARY (same as current)
   [SPECIES] - presence indicates canonical atom id order
   ATOMS - format variable, indicated within block
   [BONDS]
   [LINKS]
   [ANGLES]
   [DIHEDRALS]

---------------------------------------------------------------------
Blocks in configuration file:

BOUNDARY:

   [Boundary]

SPECIES:

   [hasBonds]
   [hasAngles]
   [hasDihedrals]
   nSpecies  [int]

   for each species {
      speciesId  nMolecule nAtom [nBond] [nAngle] [nDihedral]
   }

   Comments:

   1) The presence of this block indicates that atom and group ids
   are in molecular order.

   2) The flags hasBonds, hasAngles, and hasDihedrals are optional,
   and are all set false by default.

   3) For each species, the variables nBond, nAngle, and nDihedral 
   are each required if and only if the associated flag hasBonds, 
   hasAngles, or hasDihedrals is set.

   4) The ddSim program will write this block if the input configuration
   was read from a file which contained it. It will thus preserve and
   output molecular ordering, if it can.

ATOMS: 

   [ordered]
   format [i][m][t]p[v][s][c]
   nAtom integer

   Format flags:
   i = global id (tag)                   only required for DdMd
   m = context (species, molecule, atom) only required for DdMd
   t = type id                           only required for DdMd
   p = position                          always required
   v = velocity                          required by MD simulations
   s = shift                             optional for MD simulations
   c = charge                            (possibility, for future)

   Comments:

   1) The ordered flag is optional, and is set false by default.

   2) The default output formats for different simulation programs:

       mdSim writes all of the above, including shift when known
       mcSim writes all of the above except velocity and shift
       ddSim writes all that it can (context and shift optional)

       Note: ddSim must know if atoms are in canonical molecular order

BONDS, ANGLES, or DIHEDRALS:
   
   [ordered]
   nGroup  int
   For each {
      groupId atomId0 ... atomId(N-1) typeId
   }

   The format is essentially the same for each type of covalent bond,
   except for the block label BONDS, ANGLES, or DIHEDRALS.

