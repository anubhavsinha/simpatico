
===================================================================
Proposal:

   - Have a new namespace that contains information about molecular 
     Species.

   - Possible names for new namespace: Topo, Chem, or Struc. Use Topo as 
     an example in what follows.

   - Classes in this namespace would define only information and data 
     types that can be used in any program (e.g., no pointers to specific
     atom types). This is already true of McMd::Species.

   - Subclasses of Topo::Species within other namespaces could be 
     specialized for the namespace, allowing functions that require 
     access to simulation data structures or Atom or Group data types.
     Specifically, this would allow the addition of an associated 
     generator class in McMd and Tools, but not in DdMd.

   - Consider call the main class something other than Species to avoid 
     name clashes with classes named Species in the McMd, Tools and DdMd
     namespaces. Possibility: Call it MoleculeType or SpeciesBase.

   - Alternative way to avoid name clashes: Prohibit use of "using namespace
     Topo" in dependent namespaces. Use explicitly qualified "Topo::Group" in 
     classes that need it. Problem: Because this is different from the pattern
     used for Inter and Util, it could be misunderstood and ignored.

   - File formats for exchange would be defined by code in the common 
     namespace.

   - Have a separate associated class named Builder devoted to building 
     the moleculeType structure within the readParameters method. Create 
     a hierarchy of Builder classes, but keep MoleculeType generic.

namespace Topo{

   Possibility 1
   class Topo::MoleculeType -> base class for current McMd::Species
   class Topo::GroupType -> replaces current McMd::SpeciesGroup
   class Topo::Builder -> code to build a species

   or 

   Possibility 2
   class Topo::Species -> base class for current McMd::Species
   class Topo::Group -> replaces current McMd::SpeciesGroup
   class Topo::Builder -> code to build a species

   I may need to think harder about class names. The current proposals 
   are either not appealing or intuitive, or are error prone because 
   of the potential for name clashes. A synonym for Group would help.

}


---------------------------------------------------------------
Builder (Design):

   1) Use pimpl idiom for Builder within a Species. 

   2) Make a hierarchy of Builder classes, keep Species generic.

   3) Have Species::readParameters call Builder::readParameters.

   4) The Builder base class would provide functions that are 
   required to modify data structures of a Species, which are now
   protected classes of McMd::Species. These include: setAtomType, 
   makeBond, makeDihedral, makeAngle.

   5) Make the Builder base class a friend of Species in order
   to allow these functions (setAtomType, etc.) access to the
   data structures. The builder will require the ability to 
   modify data in these arrays, and possibly to allocate them.

   class Species {

      Species(Builder& builder)
       : builderPtr_(&builder)
      {}

      void readParameters(std::istream& in) 
      {
         bool nextIndent = false;
         addComposite(*builderPtr_, nextIndent);
         builderPtr_->readParameters(in);
      }

   private:

      Builder* builderPtr_;

   //friend:

      friend class Builder; 
   };

   class Builder {

      void readParameters(){
         ....
      }

   protected:

      void setSpecies(Species& species);

      void addBond(...);
      void addAngle(...);

      accessor to structure data;

   private:

      Species& speciesPtr_;

   };

---------------------------------------------------------------
Generators (Design):

   Introduce Generator classes in the McMd and Tools namespaces. 

   Each generator class would take a Species class as an argument
   to its constructor, and would be linked to the Species class.

   The McMd::Species and Tools::Species classes would each have 
   a function to add a Generator, a bool hasGenerator() const 
   query and a generate() function that calls the generator, if
   it exists.  

   Introduce explicit specializations for Linear, Atom, etc.

   The factory should create a Builder, a Generator, and then link 
   them to an associated Species object. All specialized functions 
   are called through the associated Builder and Generator objects.
