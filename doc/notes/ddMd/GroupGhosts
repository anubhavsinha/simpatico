Issues:

 1) For grids with 1 or 2 processors in one or more directions, a 
    processor may contain mor than one atom images (local or ghost) 
    of the same atom, with the same atom id. Currently, a group is 
    completed with local atoms if possible and, if not, completed
    with ghosts. The method for finding ghosts cannot search among
    multiple ghosts with the same id: only one atom with a specified
    id, which is the local atom if one exists. The selected image
    may not be the one that would satify the minimum convention. 
    As a result, the inner force loop for groups in BondPotentialImpl 
    etc. must impose the minimum image convention. 

 2) For grids that contain only 1 processor in one or more direction,
    a processor may contain more than one images of the same atom even
    for nonbonded ghosts.  A processor may contain either a local atom 
    and one or more ghosts or more than one ghost and no local atom. 

 3) For grid directions with only 1 processor, ghosts are not sent to
    complete groups.

 4) For grid directions with 2 processors, on the first step, the 
    current algorithm requires atoms in incomplete groups to be sent 
    in both directions. This means that the receiving processor can
    receive two or more images of each such atom with shifted 
    coordinates. Perhaps this possibility is required, but this
    algorithm sends many more ghosts on the first step than required.

 5) The algorithm for checking which boundaries a group spans, at the
    beginning of exchangeAtoms, uses the pointers to group atoms defined
    when the group was completed, and does not check the minimum image
    convention. The decision regarding which boundaries a group spans
    effect communication on later steps. Long bonds created on the first 
    step can thus persist long after the first step.

 6) The communication of so many non-bonded ghosts on the first step
    requires a larger communication buffer than required on subsequent 
    steps.

Proposals:

 1) Modify AtomStorage so as to retain a record of all ghost images (Done).

 2) During identification of spanning groups, for directions that have only
    one processor, if a group spans one boundary, an image of the group 
    spans the opposing boundary in that direction, and so the group should
    be marked for ghost transfer in both directions. 

 3) During ghost exchange, in directions that have only one processor, 
    create new ghost copies of existing atoms to all formation of compact
    groups.

 4) Modify the algorithm for completing groups so as to check the minimum
    image convention, by checking all ghosts until one is found that 
    satisfies the minimum image convention.  Algorithm: Identify a root 
    atom, which is the local atom with the lowest index.  Then complete 
    the group by adding atoms in sequence, identifying an image for each
    that satisfies the minimum image convention.  Throw an exception if 
    this cannot be done.

 5) Modify the GroupStorage to allow the findGroup method to add new
    images of existing groups. This is needed only if their is only 
    one processor in one or more directions. When an image is created,
    it should be added to a private list of images, so that these can 
    be removed prior to the next exchange.

 6) In the process of completing a group, if one finds that their is a
    local atom that does not satisfy the minimum image, create a group
    image using this group as a root. The algorithm is similar to that
    for the original group, except that the root atom is specified, and
    the process creates a new image. The algorithm is recursive: Each 
    time you find a local atom that cannot be continuously connected 
    to the previous ones, it represents the root of a new image of the 
    group.

 7) Consider writing specific instantiations of GroupStorage::findGhosts 
    for N=2, to reduce the number of if{...} blocks.

 8) For directions with 2 processors, try send connected members of the 
    group in the same sense (j=0 or j=1).  Identify uncoupled atoms, i.e., 
    atoms connected to incomplete bonds. Find the uncoupled atom that 
    is closest to a boundary. Send all local atoms in the direction of 
    the boundary for this atom. 

 9) Write a new function Exchanger::initialGhostExchange() that will be
    called just before the first step. This method would first exchange
    all nonbonded ghosts, and unset each bit of their plan upon receipt.
    After receiving nonbonded ghosts, it would add these to incomplete
    groups, choosing from among images so as to satisfy the minimum
    image convention.  Then, it would send atoms from groups that are 
    still incomplete to neighboring processors, and complete groups on 
    receipt, as in the current first step. The final step would be a
    final all-to-all communication confirming that all groups are 
    complete and satisfy the minimum image convention an all processors.

    Because multiple images of nonbonded ghosts may be received in
    systems with only one processor in some directions, the function
    that completes groups on receipt of ghosts will require an 
    algorithm for choosing from among images when completing a group 
    using nonbonded ghosts. This algorithm needs to be worked out, but 
    the same algorithm can be used during this initial exchange as 
    during subsequent exchanges. Because some groups will be incomplete
    after the first stage of exchange in the initial exchange, the
    function should not throw an Exception as soon as it fails to
    complete a group, but should return a value indicating success
    or failure, which would be checked only after the final ghost
    exchange.

    In the final step of sending atoms from incomplete groups, we 
    would like to avoid sending atoms from incomplete groups in all 27
    directions. To do this, the algorithm would require a mechanism for 
    deciding in which of two possible senses to send atoms from 
    incomplete groups for each Cartesian direction. 

    --------------------------------------------------------------------
    Algorithm for receiving ghosts, AtomMap::findGroupGhostAtoms

       Choose a root atom from among local atoms;
       Iterate over bonds going down from root {
          checkout minimum image convention;
          if (not minimum image) {
             search ghosts
          }
       }
       Iterate over bonds going up from root {
          checkout minimum image convention;
          if (not minimum image) {
             search ghosts
          }
       }

       Modify interfaces to accept const Boundary& parameter, for

          AtomMap::findGroupGhostAtoms
          GroupStorage<N>::findGroups
          GroupExchanger::findGroups

    --------------------------------------------------------------------
    Algorithm for sending ghosts, in GroupStorage::markGroupGhosts()

    For each incomplete group {
       For each direction {
          middle = 0.5*(bound(i,1) + bound(i,0))
          min0 = 1000000.0
          min1 = 1000000.0
          for each atom in group{
             if present {
                if connected to absent atom {
                   coordinate = atomPtr->position(i);
                   if (coordinate > middle) {
                      diff = upper - coordinat
                      if (diff < min1) {
                         diff = min1;
                      }
                   } else {
                      diff = coordinate - lower;
                      if (diff < min0) {
                         diff = min0;
                      }
                   }
                }
             }
          }
          if (min0 < min1) {
            mark local atoms for sending in direction 0;
          } else {
            mark local atoms for sending in direction 0;
          }
       }
       
    }

    Note that this algorithm would use all available information about
    atom positions, including nonbonded ghosts as well as local atoms.

    Needed: Algorithm for choosing from among images upon receipt of
    ghosts.


