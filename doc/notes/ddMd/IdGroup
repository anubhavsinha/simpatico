--------------------------------------------------------------------------------
Proposal:

   - Rational: Interface of GroupStorage is generic except for functions that 
     return a pointer to Group<N>*. 

   - Functions used by the GroupDistributor and GroupCollector classes only
     need access to atom indices, not pointers.

   - Proposal: Create a new class IdGroup which is a generic wrapper around a 
     Group<N>, use instances of this in the interface required by GroupDistributor 
     and GroupCollector classes, rather than pointers to Group<N> objects.

   - Proposed class:

     class IdGroup {
     private:
       int* data_;
       int  N_;
     }

   - Functions currently used by GroupDistributor

         IdGroup newIdGroup();
         void GroupExchanger::add();
         void GroupExchanger::returnPtr();

         void GroupExchanger::unsetNTotal();
         void GroupExchanger::computeNTotal();
         int  GroupExchanger::nTotal();
         bool GroupExchanger::isValid();

   - Functions currently used by GroupCollector:

         void begin(GroupIterator<N> iterator);

   - Add functions to abstract GroupExchanger class:

     // Replacement for newPtr();
     void getNewGroup(IdGroup& idGroup);

     // Replacement for iterator, access by index
     IdGroup group(int i);

     // Get size N of group
     virtual int GroupExchanger::groupSize() const;

