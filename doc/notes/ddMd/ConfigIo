Currently:

  ConfigIo::associate takes 
    - GroupStorage<N>, save pointer
    - Associates storage with GroupDistributor<N> member
    - Associates storage with GroupCollector<N>   member

  Required interface:

  ConfigIo:

    - GroupDistributor<N>::initialize()
    - GroupCollector<N>::allocate()

  DdMdConfigiIo:

   - void GroupDistributor<N>::setup()
   - Group<N>* GroupDistributor<N>::newPtr()
   - void      GroupDistributor<N>::add()
   - void      GroupDistributor<N>::send()
   - void      GroupDistributor<N>::receive()

--------------------------------------------------------------------------
Comments:

   - Interface is generic except for pointer to Group<N>* from newPtr.

   - File IO and communication only requires information about integer
     atom Ids. The required functionality of Group<N> could be encapsulated
     in a class IntGroup with an int array of variable length. 

--------------------------------------------------------------------------
Proposal:

   - Change interface and implementation of GroupDistributor and
     GroupCollector to use IdGroup objects rather than Group<N>* pointers.

   - Create a class IdGroupArray that allocates an array of IntGroup objects.
     Make this a friend of IdGroup, and provide IdGroup a private constructor
     and associate function that can be used to make an array, for use in the
     GroupCollector and GroupDistributor classes.

   - Change GroupDistributor and GroupCollector to non-template classes that
     implement the interfaces:

     GroupDistributor:
     void associate(Domain& , GroupExchanger&, Buffer& )
     void setup();
     void getNewGroup(IdGroup& idGroup);
     void add();
     void send();
     void receive();
     int  groupSize() const;
  
     GroupCollector:   
     void associate(Domain& , int N, GroupExchanger&, Buffer& )
     void setup();
     void getNewGroup(IdGroup& idGroup);
     void add();
     void send();
     int groupSize() const;

   - Add all required functions to GroupExchanger abstract base class:

     // Get size N of group
     virtual int GroupExchanger::groupSize() const;

     // Add an IdGroup to the underlying GroupStorage<N>
     virtual void GroupExchanger::addIdGroup(IdGroup& group);

     // Instantiate an IdGroupIterator of the appropriate subclass.
     virtual IdGroupIterator* GroupExchanger::iterator();

     // Initialize an IdGroupIterator
     virtual void GroupExchanger::begin(IdGroupIterator& );

