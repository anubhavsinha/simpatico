/*! \page user_options_page 2.11 Compile Time Options

\ref user_multi_page      (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref source_page          (Next) 
<BR>

Many features of the Simpatico programs can be enabled or disabled when the program is compiled, via conditional compilation of some parts of the code. This page lists these optional features, and explains how they may be enabled or disabled.

\section user_options_configure Configure script

Each object directory contains a configure script that can be used to enable or disable features of programs in that directory. This script must be invoked from the directory that contains it.  Each optional feature of Simpatico is associated with a specific single character unix command line option for this script.  Each such command line option takes a 1 or 0 as an argument to indicate that the associated feature should be enabled (1) or disabled (0). Thus for example, to disable debugging (option -g) and enable 3-body angle potentials (option -a) one would invoke
\code
  > ./configure -g0 -a1
\endcode
from the root of the object directory tree in which the program is being built, i.e., from obj/parallel or obj/serial for out-of source builds of parallel and serial programs, respectively, and from src/ for in-source builds.  As shown by this example, more than one reature may be enabled or disabled in a single command. 

Each such option of the command script causes the script to edit a configuration file by either uncommenting (to enable) or commenting out (to disable) the definition of an associated makefile macro in one of several configuration files. It is also possible to enable or disable features by directly editing the relevant lines of these files.  Each of these makefile variables has the same name as a corresponding C++ preprocessor macro that is used to control conditional compilation in C++ files.

\section user_options_options Avaiable optional features

The following table lists the most important compile time options. Each row of the table lists (in order):
 
  - description: description of the feature 

  - option:  the associated command line option for the configure script

  - default: whether the feature is ON or OFF by default

  - suffix: the suffix that is added to executable names if the default setting is modified

  - macro: the name of the associated makefile variable and C++ preprocessor variable (these are the same)

  - file: the build configuration file that contains a definition of the makefile variable

  - notes: numbers for any notes relevant to a specific feature

The optional features are:
<table>
  <tr> 
    <td> <b>description</b> </td>
    <td> <b>option </b> </td>
    <td> <b>default </b> </td>
    <td> <b>suffix </b> </td>
    <td> <b>macro</b> </td>
    <td> <b>file  </b> </td>
    <td> <b>notes </b> </td>
  </tr>
  <tr>
    <td> Message Passing Interface (MPI) </td>
    <td> -m  </td>
    <td> OFF / ON </td>
    <td> _m  </td>
    <td> UTIL_MPI </td>
    <td> config.mk </td>
    <td> (1) (2) (3) </td>
  </tr>
  <tr> 
    <td> Debugging - enables additional error checks </td>
    <td> -g </td>
    <td> OFF </td>
    <td> _g </td>
    <td> UTIL_DEBUG </td>
    <td> util/config.mk </td>
    <td>  </td>
  </tr>
  <tr> 
    <td> Bond potentials </td>
    <td> -b </td>
    <td> ON </td>
    <td> _nb </td>
    <td> INTER_BOND </td>
    <td> inter/config.mk </td>
    <td>  </td>
  </tr>
  <tr> 
    <td> Angle potentials </td>
    <td> -a </td>
    <td> OFF </td>
    <td> _a </td>
    <td> INTER_ANGLE </td>
    <td> inter/config.mk </td>
    <td>  </td>
  </tr>
  <tr> 
    <td> Dihedral potentials </td>
    <td> -d </td>
    <td> OFF </td>
    <td> _d </td>
    <td> INTER_DIHEDRAL </td>
    <td> inter/config.mk </td>
    <td>  </td>
  </tr>
  <tr> 
    <td> External potentials </td>
    <td> -e </td>
    <td> OFF </td>
    <td> _e </td>
    <td> INTER_EXTERNAL </td>
    <td> inter/config.mk </td>
    <td>  </td>
  </tr>
  <tr> 
    <td> Links (mutable bonds) </td>
    <td> -l </td>
    <td> OFF </td>
    <td> _l </td>
    <td> MCMD_LINKS </td>
    <td> mcMd/config.mk </td>
    <td>  </td>
  </tr>
  <tr> 
    <td> Free energy perturbation </td>
    <td> -f </td>
    <td> OFF </td>
    <td> _f </td>
    <td> MCMD_PERTURB </td>
    <td> mcMd/config.mk </td>
    <td> (4), (5) </td>
  </tr>
  <tr> 
    <td> DdMd Modifiers </td>
    <td> -u </td>
    <td> OFF </td>
    <td> _u </td>
    <td> DDMD_MODIFIERS </td>
    <td> ddMd/config.mk </td>
    <td> (6) </td>
  </tr>
</table>
Notes:
<ol>
  <li> 
    The MPI option is off by default in the src/ and obj/serial directories but on by default in the obj/parallel directory. Also see notes (2) and (3).
  </li>
  <li> 
    The commands associated with the makefile targets mcMd, mcMd-mpi, and ddMd all invoke the configure script to enable or disable MPI, as appropriate, before compiling any code. Specifically "make mcMd" invokes "configure -m0" and the other two targets invoke "configure -m1" to ensure that the MPI option is set correctly for a particular program. When compiling using these targets, from either the root directory or the object directory, it is thus not necessary for the user to explicitly enable or disable MPI.
  </li>
  <li> 
    The suffix _m is added the names of MPI-enabled versions of the mcSim and mdSim executables, and to MPI-enabled versions of the libutil.a, libinter.a and libmcMd.a  libraries. The suffix _m is not, however, added to the name of the ddSim executable or the libddMd.a library, because MPI is required for ddSim to function and is thus not really an optional feature.
  </li>
  <li>
    The -f free energy perturbation option is not available in ddSim. 
  </li>
  <li>
    The -f free energy perturbation option can only be used if MPI is also enabled.  If MPI is enabled, free energy perturbation is enabled by default, but may be explicitly disabled. 
  </li>
  <li>
    Enabling -u option enables the addition of modifiers to a ddSim program. Modifiers are classes that can modify the state of the system during simulation, and thereby change its time evolution. When modifiers are enabled, the parameter file may contain an optional ModifierManager{...} block immediately after the integrator block. If this feature is enabled at compile time but this block is absent from the parameter file, it will be assumed that there are no modifiers. 
  </li>
</ol>

The source code for Simpatico is divided into four namespaces named Util, Inter, McMd and DdMd. Classes in these namespaces are located in corresponding directories src/util, src/inter, src/mcMd and src/ddMd, respectively. There is a strict hierarchy of dependencies among the namespaces. One namespace is said to depend upon a second if any code in the first namespace uses classes or other names defined in the second namespace. The Util namespace does not depend on any other namespace. The Inter namespace depends only upon Util. The McMd namespace depends on Util and Inter, but not DdMd. The DdMd namespace depends on Util and Inter, but not on McMd.

The names of the macro names associated with different compile time options reflect which namespaces they effect.  Those whose names begin with MCMD_ only appear in the McMd namespace. Macros with names that begin with INTER_, are defined in inter/config.mk, are not used in the Util namespace, but can appear in the Inter, McMd and DdMd namespaces (or the src/inter/, src/mcMd/ and src/dMd/ directories). Macros with names that begin with MCMD_, which are defined in src/mcMd/config.mk, are used only in the McMd namespace (the src/mcMd directory).  Macros whose names begin with DDMD_, which are defined in src/dMd/config.mk, are used only in the DdMd namespace (the src/ddMd directory).

\section user_option_suffix File name suffixes 

When an executable is built with one or more of these optional features enabled, the makefile system appends a set of suffixes to the names of the executable file that identify which features are enabled in that executable.  This convention is intended to make it easy for users to maintain different executables with different features enabled.  The suffix for each optional feature is listed in the above table. Each file name suffix consists of an underscore followed by a one or two character code.  In most cases, the suffix character is the same as the name of the command line option used by the configure script to enable or disable the feature.  

For example, the suffix associated with the debugging feature is "_g".  A development version of the mcSim executable, which was compiled with debugging enabled, but no other optional features, would thus be named "mdSim_g". The default name version of a multi-processor MPI-enabled version of mcSim with angle and
dihedral potentials would be "mcSim_m_a_d". 

The same file name suffixes are also appended to the base names of libraries that contain code with particular features enabled. Thus, for example, a version of the libutil library that was compiled with MPI and debugging enabled would be called libutil_m_g.a by default. 

Suffixes are added to executable and library names only for non-default features that affect code in that executable or library. Thus, for example, when MPI is enabled, no "_m" suffix is added to the name of the ddSim executable or the libddMd.a library, because MPI is a default, required feature of ddSim. Because the only optional features of the classes in the Util namespace are those enabled by UTIL_MPI and UTIL_DEBUG, the only suffixes added to the name of this library are those associated with these features.
 
\section user_options_boundary Boundary Type

The choice of lattice system for the periodic unit cell (i.e., cubic, tetragonal, or orthorombic) is defined in Simpatico by a C++ typedef named Util::Boundary.  This typedef is defined in the file src/mcMd/boundary/Boundary.h. By default, Util::Boundary is defined to be a synonym for the class Util::OrthorhombicBoundary, which defines a unit cell with three orthogonal axes of arbitrary length. Throughout the source code, however, the class that represents the periodic boundary conditions is referred to only via the typedef Util::Boundary, rather than by an explict class name, such as Util::OrthorhombicBoundary.  This is designed to make it easy for users to change the unit cell type at compile time by changing this typedef to refer to, for example, Util::MonoclinicBoundary, and recompiling the program. 

We have chosen to use a typedef rather than a polymorphic classes for the boundary conditions because of concerns about efficiency.  The Boundary class provides methods that calculate separations using the minimum image convention, which are called repeatedly in the inner loops of both MD and MC simulations. The use of a polymorphic class with virtual functions would be the most flexible solution. This would allow the user to choose a boundary type at run time, but would also prevent inlining of the minimum image separation calculations. This is one case where we chose to favor efficiency over run-time flexibility.

<BR>
\ref user_multi_page      (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_page            (Up)   &nbsp; &nbsp; &nbsp; &nbsp; 
\ref source_page          (Next) 

*/
